name: 3. Build app version to gdrive

on:
  # push:
  #  branches: [ "master" ]
  # pull_request:
  #  branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
     branch:
        description: "Select branch"
        required: true
        default: "master"

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Run Build Project
    - name: Build with Gradle
      run: ./gradlew app:assembleFullRelease
    
    # Setup build tool version variable
    - name: Setup build tool version variable
      shell: bash
      run: |
        BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
        echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
        echo Last build tool version is: $BUILD_TOOL_VERSION

    # Sign APK File
    - name: Sign APK
      uses: r0adkll/sign-android-release@v1
      id: sign_app
      with:
        releaseDirectory: app/build/outputs/apk/full/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.KEY_ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        # override default build-tools version (29.0.3) -- optional
        # BUILD_TOOLS_VERSION: "35.0.2"
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}

    # Rename file
    - name: Rename file
      run: |
          PROJECT_NAME="AAPS"
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV
          VERSION=$(grep 'const val appVersion' buildSrc/src/main/kotlin/Versions.kt | awk -F'"' '{print $2}' )
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          BRANCH=${{ github.event.inputs.branch }}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          original_file="app/build/outputs/apk/full/release/app-full-release-unsigned-signed.apk"
          new_file="app/build/outputs/apk/full/release/${PROJECT_NAME}-${VERSION}_${BRANCH}-app-full-release.apk"

          if [ -f "$original_file" ]; then
            mv "$original_file" "$new_file"
            echo "File has been renamed to: $new_file"
          else
            echo "Original file not found: $original_file"
            exit 1
          fi

    # Decode and Save Google Credentials
    - name: Decode and Save Google Credentials
      run: |
        echo "${{ secrets.GDRIVE_CREDENTIALS }}" | base64 --decode > credentials.json

    # Upload APK to Google Drive
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

    - name: Upload APK to Google Drive
      env:
        GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
        RUN_NUMBER: ${{ github.run_number }}
      run: |
        python <<EOF
        import os  # Import module for os functions
        from googleapiclient.discovery import build
        from googleapiclient.http import MediaFileUpload
        from google.oauth2.service_account import Credentials

        # Authenticate with Google Drive API
        credentials = Credentials.from_service_account_file('credentials.json')
        service = build('drive', 'v3', credentials=credentials)

        # File and path information
        project_name = os.getenv('PROJECT_NAME')
        version = os.getenv('VERSION')
        branch = os.getenv('BRANCH')
        folder_id = os.getenv('GDRIVE_FOLDER_ID', '')
        run_number = os.getenv('RUN_NUMBER', '0')
        print(f"Projectname: {project_name}")
        print(f"Version: {version}")
        print(f"Branch: {branch}")
        file_name_local = f"{project_name}-{version}_{branch}-app-full-release.apk"
        file_name_gdrive = f"{project_name}-{version}_{branch}-app-full-release-{run_number}.apk"
        file_path = os.path.join('app/build/outputs/apk/full/release/', file_name_local)
        print(f"Filename: {file_name_local}")
        print(f"Filename with path: {file_path}")
        print(f"Filename_gdrive: {file_name_gdrive}")
        file_metadata = {
            'name': file_name_gdrive,       # name of the file in Google Drive
            'parents': [folder_id],  # destination folder on Google Drive
        }
        media = MediaFileUpload(file_path, mimetype='application/vnd.android.package-archive')

        # Upload the file
        file = service.files().create(body=file_metadata, media_body=media, fields='id').execute()
        print(f"File uploaded successfully with file name: {file_name_gdrive}")
        EOF
